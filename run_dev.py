#!/usr/bin/env python3
# run_dev.py ‚îÄ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑—Ä–æ–±–∫–∏
# ¬© 2025  MIT License

import subprocess
import sys
import os
import time
import signal
from pathlib import Path
from typing import Optional

from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler, FileSystemEvent

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SCRIPT_PATH = Path(sys.argv[1] if len(sys.argv) > 1 else "main.py")
LOG_PATH    = Path("bot.log")
DEBOUNCE_MS = 200          # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ —á–∞—Å—Ç—ñ—à–µ, –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ 0.2 —Å–µ–∫

WATCHED_EXT = (".py",)     # –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ ".env" —Ç–æ—â–æ


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def is_ignored(path: Path) -> bool:
    """–ü—Ä–æ–ø—É—Å–∫–∞—Ç–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ —Ñ–∞–π–ª–∏, __pycache__, —Ç–∏–º—á–∞—Å–æ–≤—ñ –ø—Ä–∞–≤–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ–≤."""
    name = path.name
    if name.startswith(".") or name.endswith(("~", ".swp", ".tmp")):
        return True
    if "__pycache__" in path.parts:
        return True
    return False


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ö–ª–∞—Å-—Ä–µ–ª–æ–∞–¥–µ—Ä
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class BotReloader(FileSystemEventHandler):
    def __init__(self, script: Path):
        self.script: Path = script
        self.proc:  Optional[subprocess.Popen] = None
        self.last_event = 0.0               # —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É (–¥–ª—è debounce)
        self.start_bot()

    # ‚îÄ‚îÄ –ó–∞–ø—É—Å–∫ / –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    def start_bot(self) -> None:
        self.stop_bot()                     # –∑—É–ø–∏–Ω–∏–º–æ, —è–∫—â–æ –≤–∂–µ —î
        print("üîÑ  –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞‚Ä¶")
        LOG_PATH.parent.mkdir(exist_ok=True)
        self.proc = subprocess.Popen(
            [sys.executable, str(self.script)],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1,
            encoding="utf-8"
        )
        # –î—É–±–ª—ñ–∫—É—î–º–æ output —É —Ç–µ—Ä–º—ñ–Ω–∞–ª + log-—Ñ–∞–π–ª
        self._pipe_output()

    def stop_bot(self) -> None:
        if not self.proc:
            return
        print("üõë  –ó—É–ø–∏–Ω—è—î–º–æ –±–æ—Ç–∞‚Ä¶")
        self.proc.terminate()
        try:
            self.proc.wait(timeout=5)
        except subprocess.TimeoutExpired:
            self.proc.kill()
        self.proc = None

    # ‚îÄ‚îÄ –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
    def on_modified(self, event: FileSystemEvent) -> None:
        path = Path(event.src_path)
        if is_ignored(path) or path.suffix not in WATCHED_EXT:
            return
        now = time.time()
        if (now - self.last_event) * 1000 < DEBOUNCE_MS:      # debounce
            return
        self.last_event = now
        print(f"üí°  –ó–º—ñ–Ω–∞ —É —Ñ–∞–π–ª—ñ: {path}")
        self.start_bot()

    # ‚îÄ‚îÄ –ß–∏—Ç–∞—î–º–æ stdout –±–æ—Ç–∞ —ñ –¥—É–±–ª—é—î–º–æ
    def _pipe_output(self) -> None:
        assert self.proc and self.proc.stdout
        log_file = LOG_PATH.open("w", encoding="utf-8")
        def _pump():
            with self.proc.stdout, log_file:
                for line in self.proc.stdout:
                    print(line.rstrip())
                    log_file.write(line)
        import threading; threading.Thread(target=_pump, daemon=True).start()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main() -> None:
    if not SCRIPT_PATH.exists():
        sys.exit(f"‚ùå  {SCRIPT_PATH} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    print("üëÄ  –°–ª—ñ–¥–∫—É—î–º–æ –∑–∞ *.py —Ñ–∞–π–ª–∞–º–∏‚Ä¶  (Ctrl-C –¥–ª—è –≤–∏—Ö–æ–¥—É)\n")

    observer = Observer()
    handler  = BotReloader(SCRIPT_PATH)
    observer.schedule(handler, path=".", recursive=True)
    observer.start()

    # ‚å®Ô∏è Ctrl-C ‚Äî –∫—Ä–∞—Å–∏–≤–æ –∑–∞–≤–µ—Ä—à—É—î–º–æ
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\n‚õî  –ó—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É.")
    finally:
        observer.stop()
        observer.join()
        handler.stop_bot()


if __name__ == "__main__":
    main()
