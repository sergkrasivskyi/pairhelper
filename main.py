import os
import logging
from dotenv import load_dotenv

# üì¶ –Ü–º–ø–æ—Ä—Ç–∏ –∑ telegram.ext
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, CallbackQueryHandler,  # ‚úÖ –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    filters
)

# üß© –Ü–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π –∑ –º–æ–¥—É–ª—ñ–≤
from handlers.menu import show_main_menu
from handlers.monitoring import (
    start_monitoring_scene, token_a_input, token_b_input, enter_cross_rate,
    TOKEN_A, TOKEN_B, ENTER_RATE
)
from handlers.pairs import (
    start_pair_removal, handle_pair_selection, SELECTING
)

# üõ¢Ô∏è –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏
from db import init_db

# üìù –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —É —Ñ–∞–π–ª bot.log
logging.basicConfig(
    filename="bot.log",
    filemode="a",
    encoding="utf-8",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# üîï –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑–∞–π–≤–∏—Ö –ª–æ–≥—ñ–≤ –≤—ñ–¥ httpx —Ç–∞ Telegram
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.ext._application").setLevel(logging.WARNING)

# üîê –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ!")
    exit(1)

# üìÇ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
init_db()

# üöÄ –ó–∞–ø—É—Å–∫ Telegram Application
app = ApplicationBuilder().token(TOKEN).build()

# üìå –ö–æ–º–∞–Ω–¥–∞ /start ‚Üí –ø–æ–∫–∞–∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
app.add_handler(CommandHandler("start", show_main_menu))

# ‚ûï –°—Ü–µ–Ω–∞: –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∞—Ä–∏ —É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
monitor_scene = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^‚ûï –ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ –ø–∞—Ä—É$"), start_monitoring_scene)],
    states={
        TOKEN_A: [MessageHandler(filters.TEXT & ~filters.COMMAND, token_a_input)],
        TOKEN_B: [MessageHandler(filters.TEXT & ~filters.COMMAND, token_b_input)],
        ENTER_RATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_cross_rate)],
    },
    fallbacks=[],
)
app.add_handler(monitor_scene)

# üìÇ –°—Ü–µ–Ω–∞: –ø–µ—Ä–µ–≥–ª—è–¥ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–≤–∏—Ö –ø–∞—Ä
remove_pairs_scene = ConversationHandler(
    # 1Ô∏è‚É£ –°—Ç–∞—Ä—Ç—É—î–º–æ —Å—Ü–µ–Ω—É –∑–≤–∏—á–∞–π–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º ¬´üìÇ –ú–æ—ó –ø–∞—Ä–∏¬ª
    entry_points=[
        MessageHandler(
            filters.Regex(r"^üìÇ\s*–ú–æ—ó\s+–ø–∞—Ä–∏$"),  # –¥–æ–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏/–≤–∞—Ä—ñ–∞—Ü—ñ—ó
            start_pair_removal
        )
    ],
    # 2Ô∏è‚É£ –î–∞–ª—ñ –ø—Ä–∞—Ü—é—î–º–æ –∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    states={
        SELECTING: [CallbackQueryHandler(handle_pair_selection)],
    },
    fallbacks=[],
    per_chat=True        # ‚úÖ –¥–æ—Å–∏—Ç—å per_chat; per_message –Ω–∞–º –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π
    # (per_chat=True = –∫–ª—é—á —Ä–æ–∑–º–æ–≤–∏ - chat_id; CallbackQuery –ø—Ä–∞—Ü—é—î –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å)
)
app.add_handler(remove_pairs_scene)

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ 
logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
app.run_polling()
