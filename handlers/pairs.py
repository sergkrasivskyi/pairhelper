from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, ConversationHandler
from services.pair_storage import get_all_pairs, delete_pair_by_id
import logging

logger = logging.getLogger(__name__)

SELECTING = 0

# üß© –ü–æ–±—É–¥–æ–≤–∞ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –ø–µ—Ä–µ–ª—ñ–∫–æ–º –ø–∞—Ä
def build_pair_selection_keyboard(pairs, selected_ids=None):
    keyboard = []
    selected_ids = selected_ids or set()

    for pair in pairs:
        # –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö —è–∫ —Å–ª–æ–≤–Ω–∏–∫
        pair_id = pair["id"]
        token_a = pair["token_a"]
        token_b = pair["token_b"]
        is_selected = pair_id in selected_ids

        # –§–æ—Ä–º—É—î–º–æ –Ω–∞–∑–≤—É –∫–Ω–æ–ø–∫–∏: 
        # ‚úÖ —è–∫—â–æ –ø–∞—Ä–∞ –≤–∏–±—Ä–∞–Ω–∞, –∞–±–æ ‚ñ´Ô∏è —è–∫—â–æ –Ω—ñ
        label = f"{'‚úÖ' if is_selected else '‚ñ´Ô∏è'} {token_a}/{token_b}"
        callback_data = f"pairid_{pair_id}"
        keyboard.append([InlineKeyboardButton(label, callback_data=callback_data)])

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    keyboard.append([
        InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –æ–±—Ä–∞–Ω—ñ", callback_data="delete_selected")
    ])
    return InlineKeyboardMarkup(keyboard)

# ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç —Å—Ü–µ–Ω–∏ –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–∞—Ä
async def start_pair_removal(update: Update, context: CallbackContext):
    logger.info("‚ñ∂Ô∏è –í–∏–∫–ª–∏–∫–∞–Ω–æ start_pair_removal")
    pairs = get_all_pairs()
    logger.info(f"üîç –û—Ç—Ä–∏–º–∞–Ω–æ {len(pairs)} –ø–∞—Ä: {pairs}")

    if not pairs:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø–∞—Ä –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
        return ConversationHandler.END

    context.user_data["selected_pairs"] = set()
    markup = build_pair_selection_keyboard(pairs)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=markup)
    return SELECTING

# üîÑ –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –ø–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞—Ö
async def handle_pair_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    data = query.data
    logger.info(f"üñ±Ô∏è –û–±—Ä–æ–±–∫–∞ callback: {data}")

    if data.startswith("pairid_"):
        try:
            pair_id = int(data.split("_")[1])  # –û—Ç—Ä–∏–º—É—î–º–æ ID –ø–∞—Ä–∏
            logger.info(f"‚úÖ –û–±—Ä–∞–Ω–æ/–∑–Ω—è—Ç–æ –ø–∞—Ä—É –∑ ID: {pair_id}")
        except (IndexError, ValueError) as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ ID –ø–∞—Ä–∏: {e}")
            await query.edit_message_text("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –ø–∞—Ä–∏.")
            return SELECTING

        # –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ –≤–∏–±—ñ—Ä: –¥–æ–¥–∞—î–º–æ –∞–±–æ –≤–∏–¥–∞–ª—è—î–º–æ –∑ –Ω–∞–±–æ—Ä—É
        selected = context.user_data.setdefault("selected_pairs", set())
        if pair_id in selected:
            selected.remove(pair_id)
        else:
            selected.add(pair_id)

        # –ü–µ—Ä–µ–±—É–¥–æ–≤—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º –≤–∏–±–æ—Ä–æ–º
        pairs = get_all_pairs()
        markup = build_pair_selection_keyboard(pairs, selected)
        await query.edit_message_reply_markup(reply_markup=markup)
        return SELECTING

    elif data == "delete_selected":
        selected = context.user_data.get("selected_pairs", set())
        logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ –ø–∞—Ä–∏: {selected}")

        if not selected:
            # –Ø–∫—â–æ –∂–æ–¥–Ω–∞ –ø–∞—Ä–∞ –Ω–µ –≤–∏–±—Ä–∞–Ω–∞, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–∑–º–æ–≤—É
            await query.edit_message_text("–ñ–æ–¥–Ω—É –ø–∞—Ä—É –Ω–µ –æ–±—Ä–∞–Ω–æ.")
            return ConversationHandler.END

        for pair_id in selected:
            delete_pair_by_id(pair_id)

        await query.edit_message_text(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –ø–∞—Ä: {len(selected)}")
        context.user_data["selected_pairs"] = set()
        return ConversationHandler.END

    logger.warning(f"‚ö†Ô∏è –ù–µ–∑—Ä–æ–∑—É–º—ñ–ª–µ callback data: {data}")
    return SELECTING
