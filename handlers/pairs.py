from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, ConversationHandler
from services.pair_storage import get_all_pairs, delete_pair_by_id

SELECTING = 0

# üß© –ü–æ–±—É–¥–æ–≤–∞ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –ø–µ—Ä–µ–ª—ñ–∫–æ–º –ø–∞—Ä
def build_pair_selection_keyboard(pairs):
    keyboard = []
    for pair in pairs:
        # ‚úÖ –û–±—Ä–æ–±–ª—è—î–º–æ —è–∫ —Å–ª–æ–≤–Ω–∏–∫, –∞ –Ω–µ —è–∫ –∫–æ—Ä—Ç–µ–∂
        pair_id = pair["id"]
        token_a = pair["token_a"]
        token_b = pair["token_b"]
        callback_data = f"pairid_{pair_id}"  # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –∫–æ–∂–Ω–æ—ó –∫–Ω–æ–ø–∫–∏
        text = f"{token_a}/{token_b}"
        keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])

    # ‚¨áÔ∏è –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    keyboard.append([InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –æ–±—Ä–∞–Ω—ñ", callback_data="delete_selected")])
    return InlineKeyboardMarkup(keyboard)

# ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç —Å—Ü–µ–Ω–∏ –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–∞—Ä
async def start_pair_removal(update: Update, context: CallbackContext):
    pairs = get_all_pairs()
    if not pairs:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø–∞—Ä –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
        return ConversationHandler.END

    markup = build_pair_selection_keyboard(pairs)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=markup)

    # ‚è≥ –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö –ø–∞—Ä
    context.user_data["selected_pairs"] = set()
    return SELECTING

# üîÑ –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –ø–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞—Ö
async def handle_pair_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("pairid_"):
        try:
            pair_id = int(data.split("_")[1])  # ‚úÖ –ö–æ—Ä–µ–∫—Ç–Ω–µ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è ID
        except (IndexError, ValueError):
            await query.edit_message_text("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –ø–∞—Ä–∏.")
            return SELECTING

        # üß† –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ –ø–∞—Ä—É: –æ–±—Ä–∞–Ω–æ ‚Üî –Ω–µ –æ–±—Ä–∞–Ω–æ
        selected = context.user_data.setdefault("selected_pairs", set())
        if pair_id in selected:
            selected.remove(pair_id)
        else:
            selected.add(pair_id)

        await query.edit_message_text(
            f"–û–±—Ä–∞–Ω–æ –ø–∞—Ä: {len(selected)}\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –æ–±—Ä–∞–Ω—ñ, —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏."
        )

    elif data == "delete_selected":
        selected = context.user_data.get("selected_pairs", set())
        if not selected:
            await query.edit_message_text("–ñ–æ–¥–Ω—É –ø–∞—Ä—É –Ω–µ –æ–±—Ä–∞–Ω–æ.")
            return SELECTING

        for pair_id in selected:
            delete_pair_by_id(pair_id)

        await query.edit_message_text(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –ø–∞—Ä: {len(selected)}")
        context.user_data["selected_pairs"] = set()
        return ConversationHandler.END

    return SELECTING
