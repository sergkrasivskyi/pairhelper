from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from services.cross_rate import get_cross_rate
from services.pair_storage import add_watched_pair

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –°–¢–ê–ù–ò ConversationHandler
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
AWAITING_PAIR_INPUT, AWAITING_CROSSRATE_DECISION, AWAITING_MANUAL_CROSSRATE = range(3)

# –¢–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö
temp_data: dict[int, dict] = {}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç —Å—Ü–µ–Ω–∏ ¬´–ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ –ø–∞—Ä—É¬ª
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start_monitoring_scene(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –û—á–∏—â—É—î–º–æ –º–æ–∂–ª–∏–≤—É –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Å—Ü–µ–Ω—É
    context.user_data.clear()

    msg = await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä—É **–∞–±–æ –∫—ñ–ª—å–∫–∞ –ø–∞—Ä** —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "`BTC/ETH` –∞–±–æ `C98/PHA NTRN/RDNT ...`",
        parse_mode="Markdown"
    )
    context.user_data["scene_messages"] = [msg.message_id]
    return AWAITING_PAIR_INPUT

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üì• –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—Ö –ø–∞—Ä
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def handle_pair_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    text = update.message.text.strip().upper()
    context.user_data["scene_messages"].append(update.message.message_id)

    pairs = text.split()
    if not pairs:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.")
        return AWAITING_PAIR_INPUT

    # ‚ñ∏ 1. –ë–∞–≥–∞—Ç–æ –ø–∞—Ä ‚Äî –¥–æ–¥–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
    if len(pairs) > 1:
        added, failed = [], []
        for pr in pairs:
            try:
                tok_a, tok_b = pr.split("/")
                rate = await get_cross_rate(tok_a, tok_b)
                add_watched_pair(tok_a, tok_b, rate)
                added.append(f"{tok_a}/{tok_b} ({rate:.6f})")
            except Exception as e:
                failed.append(f"{pr} ‚ùå ({e})")

        msg = ""
        if added:
            msg += "‚úÖ –î–æ–¥–∞–Ω–æ:\n" + "\n".join(added)
        if failed:
            msg += "\n\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è:\n" + "\n".join(failed)

        await update.message.reply_text(msg or "–ù—ñ—á–æ–≥–æ –Ω–µ –¥–æ–¥–∞–Ω–æ.")
        return ConversationHandler.END

    # ‚ñ∏ 2. –û–¥–Ω–∞ –ø–∞—Ä–∞ ‚Äî –ø—Ä–æ–ø–æ–Ω—É—î–º–æ Auto / Manual
    try:
        tok_a, tok_b = pairs[0].split("/")
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –º–∞—î –±—É—Ç–∏ `TOKEN1/TOKEN2`.")
        return AWAITING_PAIR_INPUT

    temp_data[user_id] = {"pair": (tok_a, tok_b)}

    buttons = [
        [InlineKeyboardButton("üîÑ –ê–≤—Ç–æ-–∫—Ä–æ—Å–∫—É—Ä—Å", callback_data="auto")],
        [InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data="manual")]
    ]
    await update.message.reply_text(
        f"–ü–∞—Ä–∞ **{tok_a}/{tok_b}**.\n–û–±–µ—Ä–∏ —Å–ø–æ—Å—ñ–± –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫—Ä–æ—Å–∫—É—Ä—Å—É:",
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="Markdown"
    )
    return AWAITING_CROSSRATE_DECISION

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚öôÔ∏è –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É Auto / Manual
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def handle_crossrate_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    tok_a, tok_b = temp_data[user_id]["pair"]

    if query.data == "auto":
        try:
            rate = await get_cross_rate(tok_a, tok_b)
            add_watched_pair(tok_a, tok_b, rate)
            await query.edit_message_text(f"‚úÖ –î–æ–¥–∞–Ω–æ {tok_a}/{tok_b} –∑ –∫—É—Ä—Å–æ–º {rate:.6f}")
        except Exception as e:
            await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return ConversationHandler.END

    if query.data == "manual":
        await query.edit_message_text(f"‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫—É—Ä—Å –¥–ª—è {tok_a}/{tok_b}:")
        return AWAITING_MANUAL_CROSSRATE

    await query.edit_message_text("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")
    return ConversationHandler.END

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚úçÔ∏è –†—É—á–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è –∫—Ä–æ—Å–∫—É—Ä—Å—É
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def handle_manual_crossrate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    tok_a, tok_b = temp_data[user_id]["pair"]

    try:
        rate = float(update.message.text.replace(",", "."))
        add_watched_pair(tok_a, tok_b, rate)
        await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ {tok_a}/{tok_b} –∑ –∫—É—Ä—Å–æ–º {rate}")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∫—É—Ä—Å—É.")
        return AWAITING_MANUAL_CROSSRATE
