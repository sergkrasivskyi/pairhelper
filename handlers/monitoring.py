"""
–°—Ü–µ–Ω–∞ ¬´‚ûï –ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ –ø–∞—Ä—É¬ª

‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º—É—î –≤–≤–µ–¥–µ–Ω–Ω—è **–æ–¥–Ω—ñ—î—ó** –∞–±–æ **–¥–µ–∫—ñ–ª—å–∫–æ—Ö** –ø–∞—Ä
  —É —Ñ–æ—Ä–º–∞—Ç—ñ `ABC/XYZ` —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª.
‚Ä¢ –î–ª—è –æ–¥–Ω—ñ—î—ó –ø–∞—Ä–∏ –∑–∞–ø–∏—Ç—É—î —Å–ø–æ—Å—ñ–± –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—Ä–æ—Å-–∫—É—Ä—Å—É
  (–∞–≤—Ç–æ ‚Üî —Ä—É—á–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è).
‚Ä¢ –î–∞–Ω—ñ –∑–∞–ø–∏—Å—É—é—Ç—å—Å—è —É watched_pairs (services.pair_storage.add_watched_pair).

‚Äº  –í–∞–∂–ª–∏–≤–æ:  add_watched_pair() –ø—Ä–∏–π–º–∞—î 4-–π –∞—Ä–≥—É–º–µ–Ω—Ç *user_id*,
             —Ç–æ–º—É –í–°–Ü –≤–∏–∫–ª–∏–∫–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—å ID –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
"""
from __future__ import annotations

import asyncio, re
from typing import List

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ContextTypes, ConversationHandler
)

from services.cross_rate   import get_cross_rate
from services.pair_storage import add_watched_pair


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–¢–ê–ù–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
AWAITING_PAIR_INPUT, AWAITING_CROSSRATE_DECISION, AWAITING_MANUAL_CROSSRATE = range(3)
PAIR_RE = re.compile(r"^[A-Z0-9]+/[A-Z0-9]+$")


# ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
# ‚îÇ ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç —Å—Ü–µ–Ω–∏                                          ‚îÇ
# ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
async def start_monitoring_scene(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> int:
    # ¬´–≥—Ä—É–±–æ¬ª –æ—á–∏—â–∞—î–º–æ user_data, —â–æ–±–∏ –Ω–µ —á—ñ–ø–ª—è—Ç–∏—Å—å –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Å—Ü–µ–Ω—É
    context.user_data.clear()

    msg = await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å **–æ–¥–Ω—É** –∞–±–æ **–¥–µ–∫—ñ–ª—å–∫–∞** –ø–∞—Ä —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª:\n"
        "`BTC/ETH`   `C98/PHA NTRN/RDNT` ‚Ä¶",
        parse_mode="Markdown"
    )
    context.user_data["scene_messages"] = [msg.message_id]
    return AWAITING_PAIR_INPUT


# ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
# ‚îÇ üì• –í–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä                                         ‚îÇ
# ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
async def handle_pair_input(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> int:
    text  = update.message.text.strip().upper()
    uid   = update.effective_user.id
    context.user_data["scene_messages"].append(update.message.message_id)

    pairs: List[str] = text.split()
    if not pairs:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –ø–∞—Ä–∏.")
        return AWAITING_PAIR_INPUT

    # –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É
    invalid = [p for p in pairs if not PAIR_RE.fullmatch(p)]
    if invalid:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–ø—Ä–∏–ø—É—Å—Ç–∏–º–∏–π —Ñ–æ—Ä–º–∞—Ç:\n" + "\n".join(invalid)
        )
        return AWAITING_PAIR_INPUT

    # ‚ñ∏ –î–µ–∫—ñ–ª—å–∫–∞ –ø–∞—Ä ‚Äî –æ–¥—Ä–∞–∑—É Auto
    if len(pairs) > 1:
        await _add_many_pairs(pairs, uid, update)
        return await _finish(update, context)

    # ‚ñ∏ –û–¥–Ω–∞ –ø–∞—Ä–∞ ‚Äî Auto / Manual
    tok_a, tok_b = pairs[0].split("/")
    context.user_data["pair"] = (tok_a, tok_b, uid)

    kb = [
        [InlineKeyboardButton("üîÑ –ê–≤—Ç–æ-–∫—Ä–æ—Å–∫—É—Ä—Å", callback_data="auto")],
        [InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data="manual")]
    ]
    await update.message.reply_text(
        f"–ü–∞—Ä–∞ **{tok_a}/{tok_b}**.\n–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫—Ä–æ—Å–∫—É—Ä—Å—É:",
        reply_markup=InlineKeyboardMarkup(kb),
        parse_mode="Markdown"
    )
    return AWAITING_CROSSRATE_DECISION


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _add_many_pairs(
    pairs: List[str],
    user_id: int,
    update: Update
) -> None:
    """–ü–∞—Ä–∞–ª–µ–ª—å–Ω–æ –¥–æ–¥–∞—î –¥–µ–∫—ñ–ª—å–∫–∞ –ø–∞—Ä (auto cross-rate)."""
    added, failed = [], []

    tokens, coros = [], []
    for p in pairs:
        ta, tb = p.split("/")
        tokens.append((ta, tb))
        coros.append(get_cross_rate(ta, tb))

    results = await asyncio.gather(*coros, return_exceptions=True)

    for (ta, tb), res in zip(tokens, results):
        if isinstance(res, Exception):
            failed.append(f"{ta}/{tb} ‚ùå ({res})")
        else:
            add_watched_pair(ta, tb, res, user_id)          # ‚Üê user_id
            added.append(f"{ta}/{tb} ({res:.6f})")

    parts: List[str] = []
    if added:
        parts.append("‚úÖ –î–æ–¥–∞–Ω–æ:\n" + "\n".join(added))
    if failed:
        parts.append("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è:\n" + "\n".join(failed))

    await update.message.reply_text("\n\n".join(parts) or "–ù—ñ—á–æ–≥–æ –Ω–µ –¥–æ–¥–∞–Ω–æ.")


# ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
# ‚îÇ ‚öôÔ∏è Callback-–∫–Ω–æ–ø–∫–∏ Auto / Manual                         ‚îÇ
# ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
async def handle_crossrate_choice(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> int:
    q = update.callback_query
    await q.answer()

    tok_a, tok_b, uid = context.user_data["pair"]

    if q.data == "auto":
        try:
            rate = await get_cross_rate(tok_a, tok_b)
            add_watched_pair(tok_a, tok_b, rate, uid)      # ‚Üê user_id
            await q.edit_message_text(
                f"‚úÖ –î–æ–¥–∞–Ω–æ {tok_a}/{tok_b} –∑ –∫—É—Ä—Å–æ–º {rate:.6f}"
            )
        except Exception as e:
            await q.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return await _finish(update, context)

    if q.data == "manual":
        await q.edit_message_text(f"‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫—É—Ä—Å –¥–ª—è {tok_a}/{tok_b}:")
        return AWAITING_MANUAL_CROSSRATE

    await q.edit_message_text("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")
    return await _finish(update, context)


# ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
# ‚îÇ ‚úçÔ∏è –†—É—á–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è                                        ‚îÇ
# ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
async def handle_manual_crossrate(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> int:
    tok_a, tok_b, uid = context.user_data["pair"]

    try:
        rate = float(update.message.text.replace(",", "."))
        add_watched_pair(tok_a, tok_b, rate, uid)          # ‚Üê user_id
        await update.message.reply_text(
            f"‚úÖ –î–æ–¥–∞–Ω–æ {tok_a}/{tok_b} –∑ –∫—É—Ä—Å–æ–º {rate}"
        )
        return await _finish(update, context)
    except ValueError:
        await update.message.reply_text(
            "‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∫—É—Ä—Å—É."
        )
        return AWAITING_MANUAL_CROSSRATE


# ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
# ‚îÇ üßπ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏                                      ‚îÇ
# ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
async def _finish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–∏–¥–∞–ª—è—î —Å–ª—É–∂–±–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–µ—Ä—à—É—î —Å—Ü–µ–Ω—É."""
    chat_id = update.effective_chat.id
    await asyncio.gather(*[
        context.bot.delete_message(chat_id, mid)
        for mid in context.user_data.get("scene_messages", [])
    ], return_exceptions=True)

    context.user_data.clear()
    return ConversationHandler.END
