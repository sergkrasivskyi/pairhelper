"""
–©–æ–≥–æ–¥–∏–Ω–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –≤—Å—ñ—Ö –ø–∞—Ä–∞—Ö.
‚Ä¢ –≤—ñ–¥–∫—Ä–∏—Ç—ñ —É–≥–æ–¥–∏ –ø–æ–∫–∞–∑—É—î –ø–µ—Ä—à–∏–º–∏;
‚Ä¢ –±–µ—Ä–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π 15-—Ö–≤ —Ç—ñ–∫ –∑ cross_rate_history;
‚Ä¢ –ø–æ—Ä—ñ–≤–Ω—é—î –∑—ñ —Å—Ç–∞—Ä—Ç–æ–º —ñ –∑ –æ—Å—Ç–∞–Ω–Ω—ñ–º–∏ 30-–º–∞ —Ö–≤.
"""

from __future__ import annotations
import os, sqlite3, datetime as dt
from typing import Optional
from telegram import Bot
from services.pair_storage import get_all_pairs
from services.pulse15 import last_delta_percent, pct_change

DB = "db/monitoring.db"


def last_rate(pair_id: int) -> Optional[float]:
    with sqlite3.connect(DB) as c:
        row = c.execute(
            "SELECT rate FROM cross_rate_history "
            "WHERE pair_id=? ORDER BY id DESC LIMIT 1",
            (pair_id,),
        ).fetchone()
    return row[0] if row else None


async def hourly_report(bot: Bot | None = None):
    """
    –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è APScheduler-–æ–º —Ä–∞–∑ –Ω–∞ –≥–æ–¥–∏–Ω—É.
    –ü–∞—Ä–∞–º–µ—Ç—Ä *bot* –ø–µ—Ä–µ–¥–∞—î–º–æ –∑ main.py, –∞ —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞ ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ
    –≤—Ä—É—á–Ω—É –ø–æ BOT_TOKEN.
    """
    if bot is None:
        try:
            # —Å–ø—Ä–æ–±–∞ –≤–∑—è—Ç–∏ –±–æ—Ç–∞ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ Application (—è–∫—â–æ –≤–∏–∫–ª–∏–∫ –∑ —Ö–µ–Ω–¥–ª–µ—Ä–∞)
            from telegram.ext import Application

            bot = Application.get_current().bot
        except RuntimeError:
            # fallback ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–ø—Ä—è–º—É
            bot = Bot(os.getenv("BOT_TOKEN"))

    pairs = get_all_pairs()
    if not pairs:
        return

    pairs.sort(key=lambda p: (p["trade_open"] == 0, p["id"]))  # –≤—ñ–¥–∫—Ä–∏—Ç—ñ —É–≥–æ–¥–∏ –≤–≥–æ—Ä—ñ
    ts = dt.datetime.utcnow().strftime("%H:%M")
    header = f"üïõ –ü—ñ–¥—Å—É–º–æ–∫ {ts} UTC"

    await bot.send_chat_action(chat_id=pairs[0]["user_id"], action="typing")

    lines = []
    for p in pairs:
        last = last_rate(p["id"])
        if last is None:
            continue

        pct_start = pct_change(last, p["start_rate"])
        pct_30m = last_delta_percent(p["id"], 2)

        line = (
            f"{'üü¢' if p['trade_open'] else '‚ö™Ô∏è'} "
            f"{p['token_a']}/{p['token_b']} {last:.6f}  "
            f"—Å—Ç–∞—Ä—Ç {pct_start:+.2f}% ¬∑ 30 —Ö–≤ {pct_30m:+.2f}%"
        )
        if p["potential_move"] is not None:
            line += f" ¬∑ üéØ {p['potential_move']:+.1f}%"
        lines.append(line)

    await bot.send_message(
        chat_id=pairs[0]["user_id"],
        text=f"{header}\n" + "\n".join(lines),
        disable_notification=True,
    )
